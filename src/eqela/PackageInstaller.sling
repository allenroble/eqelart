
/*
 * This file is part of Eqela CLI
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

class:

import capex.archive

func getEntries(file as File) static as vector<File>
{
	if not file:
		return null
	var v = new vector<File>
	var it = file.entries()
	while it {
		var e = it.next()
		if not e:
			break
		v += e
	}
	return v
}

func installPackageToDirectory(ctx as LoggingContext, package as File, directory as File) static as bool
{
	assert package
	assert directory
	if directory.exists() {
		Log.debug(ctx, "Removing existing package directory: `" .. directory.getPath() .. "'")
		directory.removeRecursive()
	}
	Log.debug(ctx, "Installing zip file `" .. package.getPath() .. "' to directory: `" .. directory.getPath() .. "'")
	var r = ZipReader.extractZipFileToDirectory(package, directory)
	Log.status(ctx, null)
	assert r
	var entries = assert getEntries(directory)
	if Vector.getSize(entries) != 1:
		return true
	var singleFile = Vector.get(entries, 0)
	if not singleFile || singleFile.isDirectory() == false:
		return true
	var v = true
	var it = singleFile.entries()
	while it {
		var ff = it.next()
		if not ff:
			break
		if ff.move(directory.entry(ff.baseName()), false) == false {
			Log.error(ctx, "Failed to move: `" .. ff.getPath() .. "': " .. ff.getLastErrorDescription())
			v = false
		}
	}
	if v:
		v = singleFile.removeDirectory()
	return v
}
